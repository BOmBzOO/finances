generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model AuthUser {
  id           String        @id @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]
  username     String        @unique
  enitities    Entity[]
  payments     Payment[]
  categories   Category[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Entity {
  id              Int        @id @default(autoincrement())
  userId          String     @map("user_id")
  user            AuthUser   @relation(fields: [userId], references: [id])
  name            String
  identifier      String
  type            EntityType
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  paymentsAsPayor Payment[]  @relation("PayorEntity")
  paymentsAsPayee Payment[]  @relation("PayeeEntity")

  @@unique(fields: [userId, name])
  @@unique(fields: [userId, identifier])
  @@map("entities")
}

enum EntityType {
  Entity
  Account
}

model Payment {
  id         Int       @id @default(autoincrement())
  userId     String    @map("user_id")
  user       AuthUser  @relation(fields: [userId], references: [id])
  amount     BigInt
  currency   String    @default("EUR")
  date       DateTime  @default(now())
  payor      Entity    @relation("PayorEntity", fields: [payorId], references: [id])
  payorId    Int       @map("payor_id")
  payee      Entity    @relation("PayeeEntity", fields: [payeeId], references: [id])
  payeeId    Int       @map("payee_id")
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@map("payments")
}

model Category {
  id        Int       @id @default(autoincrement())
  userId    String    @map("user_id")
  user      AuthUser  @relation(fields: [userId], references: [id])
  name      String
  color     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  payments  Payment[]

  @@map("categories")
}
